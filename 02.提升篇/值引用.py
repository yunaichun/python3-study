# 零、由于列表可变，执行 append() 函数，对其末尾加入新元素 4 时，变量 l1 和 l2 的值也都随之改变了。
def my_func3(l2):
	l2.append(4)
l1 = [1, 2, 3]
my_func3(l1)
print(l1) # [1, 2, 3, 4]


# 一、l2 = l2 + [4]，表示创建了一个“末尾加入元素 4“的新列表，并让 l2 指向这个新的对象。这个过程与 l1 无关，因此 l1 的值不变。
def my_func4(l2):
	l2 = l2 + [4]
l1 = [1, 2, 3]
my_func4(l1)
print(l1) # [1, 2, 3]


# 二、列表是可变对象，每创建一个列表，都会重新分配内存，因此 l1 和 l2 并不是同一个对象，由于 l3 = l2 表明 l3 指向 l2 的对象。
l1 = [1, 2, 3]
l2 = [1, 2, 3]
l3 = l2
print(l1 is l2) # False
print(l3 is l2) # True

# 三、输出的结果应该是 {'a': 10, 'b': 20} ，d = {'a': 1, 'b': 2} 属于重新指向新的对象，并不改变原有的字典对象。
def func(d):
    d['a'] = 10
    d['b'] = 20
    d = {'a': 1, 'b': 2}
d = {}
func(d)
print(d)
